<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (1.8.0_31) on Fri Feb 27 05:37:08 CST 2015 -->
<title>SequenceFact</title>
<meta name="date" content="2015-02-27">
<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
<script type="text/javascript" src="../script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="SequenceFact";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/SequenceFact.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../parser/ProxyFact.html" title="class in parser"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../parser/SequenceSymbol.html" title="class in parser"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?parser/SequenceFact.html" target="_top">Frames</a></li>
<li><a href="SequenceFact.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">parser</div>
<h2 title="Class SequenceFact" class="title">Class SequenceFact</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li><a href="../parser/ATokVisitorFact.html" title="class in parser">parser.ATokVisitorFact</a></li>
<li>
<ul class="inheritance">
<li>parser.SequenceFact</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd><a href="../parser/ITokVisitorFact.html" title="interface in parser">ITokVisitorFact</a></dd>
</dl>
<hr>
<br>
<pre>public class <span class="typeNameLabel">SequenceFact</span>
extends <a href="../parser/ATokVisitorFact.html" title="class in parser">ATokVisitorFact</a></pre>
<div class="block">A factory to create visitors to parse a binary sequence of grammar tokens.
 To easily create a sequence of two or more grammar tokens, use 
 MultiSequenceFact rather than multiple SequenceFacts.
 Sequences have lazy tails to avoid problems with recursive dependencies.</div>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private <a href="../parser/ITokVisitorFact.html" title="interface in parser">ITokVisitorFact</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../parser/SequenceFact.html#Z:Z_fact1">_fact1</a></span></code>
<div class="block">Factory for the first grammar non-terminals.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private <a href="../parser/ITokVisitorFact.html" title="interface in parser">ITokVisitorFact</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../parser/SequenceFact.html#Z:Z_fact2">_fact2</a></span></code>
<div class="block">Factory for the second grammar non-terminals.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private <a href="../util/ILambda.html" title="interface in util">ILambda</a>&lt;java.lang.Void,java.lang.Void&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../parser/SequenceFact.html#Z:Z_headInitializer">_headInitializer</a></span></code>
<div class="block">Initializer lambda for this factory.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private <a href="../token/ATokVisitor.html" title="class in token">ATokVisitor</a>&lt;<a href="../parser/IGrammarSymbol.html" title="interface in parser">IGrammarSymbol</a>,java.lang.Object&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../parser/SequenceFact.html#Z:Z_lazyParse2">_lazyParse2</a></span></code>
<div class="block">Visitor for the second grammar non-terminals.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private <a href="../token/ATokVisitor.html" title="class in token">ATokVisitor</a>&lt;<a href="../parser/IGrammarSymbol.html" title="interface in parser">IGrammarSymbol</a>,java.lang.Object&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../parser/SequenceFact.html#Z:Z_parse1">_parse1</a></span></code>
<div class="block">Visitor for the first grammar non-terminals.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>private <a href="../util/ILambda.html" title="interface in util">ILambda</a>&lt;java.lang.Void,java.lang.Void&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../parser/SequenceFact.html#Z:Z_tailInitializer">_tailInitializer</a></span></code>
<div class="block">Initializer lambda for this factory.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>private boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../parser/SequenceFact.html#firstTime">firstTime</a></span></code>
<div class="block">Used to prevent recursive printing when same factory appears more than once</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../parser/SequenceFact.html#SequenceFact-util.ILambda-token.tokenizer.ITokenizer-parser.ITokVisitorFact-parser.ITokVisitorFact-">SequenceFact</a></span>(<a href="../util/ILambda.html" title="interface in util">ILambda</a>&lt;java.lang.String,java.lang.Void&gt;&nbsp;getNameCmd,
            <a href="../token/tokenizer/ITokenizer.html" title="interface in token.tokenizer">ITokenizer</a>&nbsp;tkz,
            <a href="../parser/ITokVisitorFact.html" title="interface in parser">ITokVisitorFact</a>&nbsp;fact1,
            <a href="../parser/ITokVisitorFact.html" title="interface in parser">ITokVisitorFact</a>&nbsp;fact2)</code>
<div class="block">Constructor for the sequence factory.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../parser/SequenceFact.html#SequenceFact-java.lang.String-token.tokenizer.ITokenizer-parser.ITokVisitorFact-parser.ITokVisitorFact-">SequenceFact</a></span>(java.lang.String&nbsp;name,
            <a href="../token/tokenizer/ITokenizer.html" title="interface in token.tokenizer">ITokenizer</a>&nbsp;tkz,
            <a href="../parser/ITokVisitorFact.html" title="interface in parser">ITokVisitorFact</a>&nbsp;fact1,
            <a href="../parser/ITokVisitorFact.html" title="interface in parser">ITokVisitorFact</a>&nbsp;fact2)</code>
<div class="block">Constructor for the sequence factory,
 Used when the name of the Sequence is already available.</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>private <a href="../token/ATokVisitor.html" title="class in token">ATokVisitor</a>&lt;<a href="../parser/IGrammarSymbol.html" title="interface in parser">IGrammarSymbol</a>,java.lang.Object&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../parser/SequenceFact.html#Z:Z_parse2--">_parse2</a></span>()</code>&nbsp;</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code><a href="../token/ATokVisitor.html" title="class in token">ATokVisitor</a>&lt;<a href="../parser/IGrammarSymbol.html" title="interface in parser">IGrammarSymbol</a>,java.lang.Object&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../parser/SequenceFact.html#makeCombinedVisitor-token.ATokVisitor-">makeCombinedVisitor</a></span>(<a href="../token/ATokVisitor.html" title="class in token">ATokVisitor</a>&lt;<a href="../parser/IGrammarSymbol.html" title="interface in parser">IGrammarSymbol</a>,java.lang.Object&gt;&nbsp;other)</code>
<div class="block">Make a token visitor that will process the combination of this sequence
 or the other given symbol</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code><a href="../token/ATokVisitor.html" title="class in token">ATokVisitor</a>&lt;<a href="../parser/IGrammarSymbol.html" title="interface in parser">IGrammarSymbol</a>,java.lang.Object&gt;</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../parser/SequenceFact.html#makeVisitor--">makeVisitor</a></span>()</code>
<div class="block">Make a token visitor to parse an sequence non-terminal.</div>
</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../parser/SequenceFact.html#toString--">toString</a></span>()</code>
<div class="block">Recursively prints the composed factories only the first time that this is called, otherwise just prints their names.</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.parser.ATokVisitorFact">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;parser.<a href="../parser/ATokVisitorFact.html" title="class in parser">ATokVisitorFact</a></h3>
<code><a href="../parser/ATokVisitorFact.html#getName--">getName</a>, <a href="../parser/ATokVisitorFact.html#nextToken--">nextToken</a>, <a href="../parser/ATokVisitorFact.html#putBackToken-token.Token-">putBackToken</a></code></li>
</ul>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field.detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="Z:Z_fact1">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>_fact1</h4>
<pre>private&nbsp;<a href="../parser/ITokVisitorFact.html" title="interface in parser">ITokVisitorFact</a> _fact1</pre>
<div class="block">Factory for the first grammar non-terminals.</div>
</li>
</ul>
<a name="Z:Z_parse1">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>_parse1</h4>
<pre>private&nbsp;<a href="../token/ATokVisitor.html" title="class in token">ATokVisitor</a>&lt;<a href="../parser/IGrammarSymbol.html" title="interface in parser">IGrammarSymbol</a>,java.lang.Object&gt; _parse1</pre>
<div class="block">Visitor for the first grammar non-terminals.</div>
</li>
</ul>
<a name="Z:Z_fact2">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>_fact2</h4>
<pre>private&nbsp;<a href="../parser/ITokVisitorFact.html" title="interface in parser">ITokVisitorFact</a> _fact2</pre>
<div class="block">Factory for the second grammar non-terminals.</div>
</li>
</ul>
<a name="Z:Z_lazyParse2">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>_lazyParse2</h4>
<pre>private&nbsp;<a href="../token/ATokVisitor.html" title="class in token">ATokVisitor</a>&lt;<a href="../parser/IGrammarSymbol.html" title="interface in parser">IGrammarSymbol</a>,java.lang.Object&gt; _lazyParse2</pre>
<div class="block">Visitor for the second grammar non-terminals.</div>
</li>
</ul>
<a name="Z:Z_headInitializer">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>_headInitializer</h4>
<pre>private&nbsp;<a href="../util/ILambda.html" title="interface in util">ILambda</a>&lt;java.lang.Void,java.lang.Void&gt; _headInitializer</pre>
<div class="block">Initializer lambda for this factory.  This will instantiate the first composee visitor
 and then mutate into a no-op so that the instantiation won't take place again.</div>
</li>
</ul>
<a name="Z:Z_tailInitializer">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>_tailInitializer</h4>
<pre>private&nbsp;<a href="../util/ILambda.html" title="interface in util">ILambda</a>&lt;java.lang.Void,java.lang.Void&gt; _tailInitializer</pre>
<div class="block">Initializer lambda for this factory.  This will instantiate the second composee visitor
 and then mutate into a no-op so that the instantiation won't take place again.</div>
</li>
</ul>
<a name="firstTime">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>firstTime</h4>
<pre>private&nbsp;boolean firstTime</pre>
<div class="block">Used to prevent recursive printing when same factory appears more than once</div>
</li>
</ul>
</li>
</ul>
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="SequenceFact-java.lang.String-token.tokenizer.ITokenizer-parser.ITokVisitorFact-parser.ITokVisitorFact-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>SequenceFact</h4>
<pre>public&nbsp;SequenceFact(java.lang.String&nbsp;name,
                    <a href="../token/tokenizer/ITokenizer.html" title="interface in token.tokenizer">ITokenizer</a>&nbsp;tkz,
                    <a href="../parser/ITokVisitorFact.html" title="interface in parser">ITokVisitorFact</a>&nbsp;fact1,
                    <a href="../parser/ITokVisitorFact.html" title="interface in parser">ITokVisitorFact</a>&nbsp;fact2)</pre>
<div class="block">Constructor for the sequence factory,
 Used when the name of the Sequence is already available.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>name</code> - The grammar token's name of this instance of a sequence.</dd>
<dd><code>tkz</code> - tokenizer to use</dd>
<dd><code>fact1</code> - factory for the first non-terminals</dd>
<dd><code>fact2</code> - factory for the second non-terminals</dd>
</dl>
</li>
</ul>
<a name="SequenceFact-util.ILambda-token.tokenizer.ITokenizer-parser.ITokVisitorFact-parser.ITokVisitorFact-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>SequenceFact</h4>
<pre>public&nbsp;SequenceFact(<a href="../util/ILambda.html" title="interface in util">ILambda</a>&lt;java.lang.String,java.lang.Void&gt;&nbsp;getNameCmd,
                    <a href="../token/tokenizer/ITokenizer.html" title="interface in token.tokenizer">ITokenizer</a>&nbsp;tkz,
                    <a href="../parser/ITokVisitorFact.html" title="interface in parser">ITokVisitorFact</a>&nbsp;fact1,
                    <a href="../parser/ITokVisitorFact.html" title="interface in parser">ITokVisitorFact</a>&nbsp;fact2)</pre>
<div class="block">Constructor for the sequence factory.
 Used when the name of the Sequence must be lazily created, e.g. when a Proxy is involved.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>getNameCmd</code> - The command to generate the name of the Sequence Factory</dd>
<dd><code>tkz</code> - tokenizer to use</dd>
<dd><code>fact1</code> - factory for the first non-terminals</dd>
<dd><code>fact2</code> - factory for the second non-terminals</dd>
</dl>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="Z:Z_parse2--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>_parse2</h4>
<pre>private&nbsp;<a href="../token/ATokVisitor.html" title="class in token">ATokVisitor</a>&lt;<a href="../parser/IGrammarSymbol.html" title="interface in parser">IGrammarSymbol</a>,java.lang.Object&gt;&nbsp;_parse2()</pre>
</li>
</ul>
<a name="makeVisitor--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>makeVisitor</h4>
<pre>public&nbsp;<a href="../token/ATokVisitor.html" title="class in token">ATokVisitor</a>&lt;<a href="../parser/IGrammarSymbol.html" title="interface in parser">IGrammarSymbol</a>,java.lang.Object&gt;&nbsp;makeVisitor()</pre>
<div class="block">Make a token visitor to parse an sequence non-terminal.   The composee visitors are lazily instantiated,
 That is, not instantiated until this method or makeCombinedVisitor() is called.   After that, 
 the composed visitors are eager and no further instantiations are required or desired. 
  This method works by replacing every cmd in the first visitor with a new one that, for every replaced cmd, 
  first runs the original first visitor cmd and then the second visitor to create a SequenceSymbol output.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>token visitor</dd>
</dl>
</li>
</ul>
<a name="makeCombinedVisitor-token.ATokVisitor-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>makeCombinedVisitor</h4>
<pre>public&nbsp;<a href="../token/ATokVisitor.html" title="class in token">ATokVisitor</a>&lt;<a href="../parser/IGrammarSymbol.html" title="interface in parser">IGrammarSymbol</a>,java.lang.Object&gt;&nbsp;makeCombinedVisitor(<a href="../token/ATokVisitor.html" title="class in token">ATokVisitor</a>&lt;<a href="../parser/IGrammarSymbol.html" title="interface in parser">IGrammarSymbol</a>,java.lang.Object&gt;&nbsp;other)</pre>
<div class="block">Make a token visitor that will process the combination of this sequence
 or the other given symbol</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>other</code> - The visitor for the other symbol in the combination</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A token visitor</dd>
</dl>
</li>
</ul>
<a name="toString--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>toString</h4>
<pre>public&nbsp;java.lang.String&nbsp;toString()</pre>
<div class="block">Recursively prints the composed factories only the first time that this is called, otherwise just prints their names.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>toString</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/SequenceFact.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../parser/ProxyFact.html" title="class in parser"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="../parser/SequenceSymbol.html" title="class in parser"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?parser/SequenceFact.html" target="_top">Frames</a></li>
<li><a href="SequenceFact.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
